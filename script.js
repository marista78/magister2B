// ========================================
// üéØ CONFIGURACI√ìN S√öPER F√ÅCIL DE ACTIVIDADES
// ¬°SOLO MODIFICAR AQU√ç PARA AGREGAR NUEVAS!
// ========================================

// PASO 1: Definir todas las actividades (F√ÅCIL DE MODIFICAR)
const ACTIVIDADES = [
    { id: 'canastaMadre', nombre: 'Canasta de la Madre', costo: 7, grupo: 'madre' },
    { id: 'regaloMiss', nombre: 'Regalo D√≠a de la Madre Miss', costo: 5, grupo: 'madre' },
    { id: 'canastaPadre', nombre: 'Canasta del Padre', costo: 7, grupo: 'padre' },
    { id: 'aro', nombre: 'Confecci√≥n de Aro', costo: 3, grupo: 'padre' },
    { id: 'actPadre', nombre: 'Actividad del Padre', costo: 15, grupo: 'padre' },
    { id: 'diaMaestro', nombre: 'D√≠a del Maestro', costo: 5, grupo: 'maestro' },
    
    // ¬°PARA AGREGAR NUEVA ACTIVIDAD, SOLO AGREGA UNA L√çNEA AQU√ç! üéâ
    //{ id: 'aniversario', nombre: 'Aniversario del Colegio', costo: 6, grupo: 'aniversario' }//
    // ¬°Y listo! El resto se actualiza autom√°ticamente
];

// PASO 2: Lista de estudiantes (SOLO NOMBRES)
const ESTUDIANTES_BASE = [
    "Arista Atauchi, Jose Andre",
    "Bautista Hualpa Kate", 
    "Borjas Medina, Dereck",
    "Cajacuri Cardenas, Arlett",
    "Carita Chuquihuanga, Valeria",
    "Chile Suyco, Juli√°n Enrique",
    "Fern√°ndez Alcantara, Fernando",
    "Gutierrez Inocente, Rodrigo",
    "Isique Vilcahuam√°n, Ana Dayanne",
    "Ju√°rez Mondrag√≥n, Mia Shirley",
    "Manyari Vargas, Iker Miguel",
    "Mendoza Socualaya, Ezio Valent√≠n",
    "Paico C√©spedes, J√©sus",
    "Pedroza Mu√±oz, Rafaela Valentina",
    "Ramos Valdivia, Brianna",
    "Rivas Ramos Yamila Isel",
    "Sahuanay Moreno, Dayana",
    "Tapia Panebra, Renato",
    "Tejada Castillo, Emily",
    "Torres de la Cruz, Noah Jos√©",
    "Ycarrayme Rimarachin, Mikaela"
];

// PASO 3: ¬°SOLO EXCEPCIONES! (estudiantes que pagan diferente)
const EXCEPCIONES_PAGO = {
    "Bautista Hualpa Kate": { actPadre: 0 },  // No pag√≥ actividad del padre
    "Paico C√©spedes, J√©sus": { actPadre: 0 }, // No pag√≥ actividad del padre
    
    // ¬°AGREGAR EXCEPCIONES AQU√ç ES S√öPER F√ÅCIL!
    // "Nombre del Estudiante": { aniversario: 0 },  // Si alguien no paga el aniversario
    // "Otro Estudiante": { aniversario: 6 },        // Si alguien paga menos
};

// ========================================
// ¬°EL RESTO ES AUTOM√ÅTICO! NO TOCAR ü§ñ
// ========================================

// Variable global para compatibilidad
let students = [];

// Generar estudiantes autom√°ticamente
function generarEstudiantes() {
    try {
        return ESTUDIANTES_BASE.map((nombre, index) => {
            const estudiante = {
                no: index + 1,
                name: nombre
            };
            
            // Agregar todas las actividades con su costo default
            ACTIVIDADES.forEach(actividad => {
                estudiante[actividad.id] = actividad.costo;
            });
            
            // Aplicar excepciones si existen
            if (EXCEPCIONES_PAGO[nombre]) {
                Object.assign(estudiante, EXCEPCIONES_PAGO[nombre]);
            }
            
            return estudiante;
        });
    } catch (error) {
        console.error('Error en generarEstudiantes:', error);
        return [];
    }
}

// ========================================
// FUNCIONES PARA ACTUALIZAR RESUMEN AUTOM√ÅTICO
// ========================================

function actualizarResumenSuperior() {
    try {
        console.log('üîÑ Actualizando resumen superior...');
        
        // Actualizar las cards del resumen
        const estudiantes = generarEstudiantes();
        const totalRecaudado = estudiantes.reduce((sum, est) => {
            return sum + ACTIVIDADES.reduce((actSum, act) => actSum + (est[act.id] || 0), 0);
        }, 0);
        
        // CONTAR CATEGOR√çAS √öNICAS (no actividades individuales)
        const categoriasUnicas = [...new Set(ACTIVIDADES.map(act => act.grupo))].length;
        
        console.log('üí∞ Total recaudado calculado:', totalRecaudado);
        console.log('üìÇ Categor√≠as √∫nicas:', categoriasUnicas);
        
        // Actualizar cards si existen
        const cards = document.querySelectorAll('.summary-cards .card h3');
        console.log('üìä Cards encontradas:', cards.length);
        
        if (cards.length >= 4) {
            cards[0].textContent = estudiantes.length; // Estudiantes
            cards[1].textContent = `S/ ${totalRecaudado.toFixed(0)}`; // Total Recaudado
            cards[2].textContent = categoriasUnicas; // CATEGOR√çAS (no actividades individuales)
            // Participaci√≥n se mantiene igual
            console.log('‚úÖ Cards actualizadas correctamente');
            console.log(`üìã Actividades individuales: ${ACTIVIDADES.length}, Categor√≠as: ${categoriasUnicas}`);
        }
        
        // Actualizar tabla principal de resumen
        actualizarTablaResumenPrincipal();
        
    } catch (error) {
        console.error('‚ùå Error en actualizarResumenSuperior:', error);
    }
}

function actualizarTablaResumenPrincipal() {
    try {
        console.log('üìã Actualizando tabla principal...');
        
        const tabla = document.querySelector('#resumen table tbody');
        
        if (!tabla) {
            console.warn('‚ö†Ô∏è No se encontr√≥ la tabla de resumen');
            return;
        }
        
        const estudiantes = generarEstudiantes();
        console.log('üë• Estudiantes para tabla:', estudiantes.length);
        
        // Limpiar tabla
        tabla.innerHTML = '';
        
        // Agregar fila por cada actividad
        ACTIVIDADES.forEach((actividad, index) => {
            const participantes = estudiantes.filter(est => (est[actividad.id] || 0) > 0).length;
            const totalRecaudado = estudiantes.reduce((sum, est) => sum + (est[actividad.id] || 0), 0);
            
            const fila = document.createElement('tr');
            fila.innerHTML = `
                <td>${actividad.nombre}</td>
                <td class="amount">S/ ${actividad.costo.toFixed(2)}</td>
                <td class="amount">S/ ${totalRecaudado.toFixed(2)}</td>
                <td>${participantes}/${estudiantes.length}</td>
            `;
            tabla.appendChild(fila);
            
            console.log(`‚úÖ Fila ${index + 1} agregada: ${actividad.nombre}`);
        });
        
        console.log('üéâ Tabla principal actualizada correctamente');
        
    } catch (error) {
        console.error('‚ùå Error en actualizarTablaResumenPrincipal:', error);
    }
}

// ========================================
// FUNCI√ìN PARA GENERAR HEADERS DIN√ÅMICOS
// ========================================

function generarHeadersTablaEstudiantes() {
    try {
        console.log('üèóÔ∏è Generando headers din√°micos...');
        
        const tabla = document.querySelector('#estudiantes table');
        if (!tabla) {
            console.warn('‚ö†Ô∏è No se encontr√≥ la tabla de estudiantes');
            return;
        }
        
        // Agrupar actividades
        const grupos = {};
        ACTIVIDADES.forEach(act => {
            if (!grupos[act.grupo]) grupos[act.grupo] = [];
            grupos[act.grupo].push(act);
        });
        
        console.log('üìã Grupos para headers:', Object.keys(grupos));
        
        // Nombres de grupos para mostrar
        const nombresGrupos = {
            madre: 'D√çA DE LA MADRE',
            padre: 'D√çA DEL PADRE', 
            maestro: 'D√çA DEL MAESTRO',
            aniversario: 'ANIVERSARIO',
            especial: 'ACTIVIDADES ESPECIALES'
        };
        
        // Colores de grupos
        const coloresGrupos = {
            madre: 'madre',
            padre: 'padre',
            maestro: 'maestro', 
            aniversario: 'aniversario',
            especial: 'especial'
        };
        
        // Generar header principal
        let headerPrincipal = '<tr><th rowspan="2">N¬∞</th><th rowspan="2">Apellidos y Nombres</th>';
        
        Object.keys(grupos).forEach(grupoId => {
            const grupo = grupos[grupoId];
            const nombre = nombresGrupos[grupoId] || grupoId.toUpperCase();
            const color = coloresGrupos[grupoId] || 'especial';
            headerPrincipal += `<th colspan="${grupo.length + 1}" class="group-header ${color}">${nombre}</th>`;
        });
        
        headerPrincipal += '<th rowspan="2">Total Pagado</th></tr>';
        
        // Generar header secundario
        let headerSecundario = '<tr>';
        
        Object.keys(grupos).forEach(grupoId => {
            const grupo = grupos[grupoId];
            const color = coloresGrupos[grupoId] || 'especial';
            
            grupo.forEach(actividad => {
                headerSecundario += `<th class="subheader">${actividad.nombre}</th>`;
            });
            headerSecundario += `<th class="subheader ${color}">Subtotal</th>`;
        });
        
        headerSecundario += '</tr>';
        
        // Reemplazar thead completo
        const thead = tabla.querySelector('thead');
        if (thead) {
            thead.innerHTML = headerPrincipal + headerSecundario;
            console.log('‚úÖ Headers din√°micos generados correctamente');
        } else {
            console.warn('‚ö†Ô∏è No se encontr√≥ thead en la tabla');
        }
        
    } catch (error) {
        console.error('‚ùå Error en generarHeadersTablaEstudiantes:', error);
    }
}

// NUEVA FUNCI√ìN PARA LLENAR TABLA COMPLETAMENTE AUTOM√ÅTICA
function fillStudentTable() {
    const tbody = document.getElementById('studentTableBody');
    if (!tbody) return;
    
    // Generar estudiantes autom√°ticamente
    students = generarEstudiantes();
    
    console.log(`‚úÖ Sistema gener√≥ autom√°ticamente ${students.length} estudiantes con ${ACTIVIDADES.length} actividades`);
    
    // PRIMERO: Generar headers din√°micos
    generarHeadersTablaEstudiantes();
    
    // SEGUNDO: Actualizar resumen superior
    actualizarResumenSuperior();
    
    let totales = {};
    
    // Inicializar totales para todas las actividades
    ACTIVIDADES.forEach(actividad => {
        totales[actividad.id] = 0;
    });
    totales.totalGeneral = 0;

    // Limpiar contenido previo
    tbody.innerHTML = '';

    // Agrupar actividades por grupo
    const grupos = {};
    ACTIVIDADES.forEach(act => {
        if (!grupos[act.grupo]) grupos[act.grupo] = [];
        grupos[act.grupo].push(act);
    });

    // Llenar datos de estudiantes
    students.forEach(student => {
        let totalEstudiante = 0;
        let celdas = [];
        
        // N√∫mero y nombre
        celdas.push(`<td>${student.no}</td>`);
        celdas.push(`<td class="student-name">${student.name}</td>`);
        
        // Por cada grupo en orden
        Object.keys(grupos).forEach(grupoId => {
            const grupoActividades = grupos[grupoId];
            let subtotalGrupo = 0;
            
            // Actividades del grupo
            grupoActividades.forEach(actividad => {
                const monto = student[actividad.id] || 0;
                celdas.push(`<td class="amount">S/ ${monto.toFixed(2)}</td>`);
                subtotalGrupo += monto;
                totales[actividad.id] += monto;
            });
            
            // Subtotal del grupo
            celdas.push(`<td class="amount" style="font-weight: bold;">S/ ${subtotalGrupo.toFixed(2)}</td>`);
            totalEstudiante += subtotalGrupo;
        });
        
        // Total del estudiante
        celdas.push(`<td class="amount" style="font-weight: bold;">S/ ${totalEstudiante.toFixed(2)}</td>`);
        totales.totalGeneral += totalEstudiante;

        tbody.innerHTML += `<tr>${celdas.join('')}</tr>`;
    });

    // Agregar fila de totales autom√°ticamente
    agregarFilaTotalesCompletamenteAutomatica(tbody, totales, grupos);

    // Generar resumen actualizado
    generateSummary(totales.totalGeneral);
}

function agregarFilaTotalesCompletamenteAutomatica(tbody, totales, grupos) {
    try {
        console.log('üßÆ Agregando fila de totales...');
        
        let totalCeldas = ['<td colspan="2"><strong>TOTALES</strong></td>'];
        
        // Por cada grupo en el mismo orden
        Object.keys(grupos).forEach(grupoId => {
            const grupoActividades = grupos[grupoId];
            let totalGrupo = 0;
            
            // Totales de actividades del grupo
            grupoActividades.forEach(actividad => {
                const total = totales[actividad.id] || 0;
                totalCeldas.push(`<td class="amount"><strong>S/ ${total.toFixed(2)}</strong></td>`);
                totalGrupo += total;
            });
            
            // Subtotal del grupo
            totalCeldas.push(`<td class="amount"><strong>S/ ${totalGrupo.toFixed(2)}</strong></td>`);
        });
        
        // Total general
        totalCeldas.push(`<td class="amount"><strong>S/ ${totales.totalGeneral.toFixed(2)}</strong></td>`);
        
        // Crear fila de totales
        const filaTotales = document.createElement('tr');
        filaTotales.className = 'total-row';
        filaTotales.innerHTML = totalCeldas.join('');
        tbody.appendChild(filaTotales);
        
        console.log('‚úÖ Fila de totales agregada');
        
    } catch (error) {
        console.error('‚ùå Error en agregarFilaTotalesCompletamenteAutomatica:', error);
    }
}

// Generar resumen simplificado
function generateSummary(totalGeneral) {
    try {
        const summaryDiv = document.getElementById('summary');
        if (!summaryDiv) return;
        
        summaryDiv.innerHTML = `
            <div style="margin-top: 30px; padding: 20px; background-color: #f8f9fa; border-radius: 8px; border-left: 4px solid #007bff;">
                <h3 style="color: #343a40; margin-bottom: 15px;">üìä Resumen de Pagos Din√°mico</h3>
                <p><strong>Total de estudiantes:</strong> ${students.length}</p>
                <p><strong>Total de actividades:</strong> ${ACTIVIDADES.length}</p>
                <p><strong>Recaudaci√≥n total:</strong> S/ ${totalGeneral.toFixed(2)}</p>
                <p><strong>üéØ Sistema autom√°tico:</strong> Configuraci√≥n f√°cil activada</p>
            </div>
        `;
        
        console.log('‚úÖ Resumen generado');
        
    } catch (error) {
        console.error('‚ùå Error en generateSummary:', error);
    }
}

// Funci√≥n para cambiar de pesta√±a
function openTab(event, tabName) {
    // Ocultar todos los contenidos de pesta√±as
    const tabContents = document.getElementsByClassName('tab-content');
    for (let i = 0; i < tabContents.length; i++) {
        tabContents[i].classList.remove('active');
    }

    // Quitar la clase active de todos los botones de pesta√±a
    const tabs = document.getElementsByClassName('tab');
    for (let i = 0; i < tabs.length; i++) {
        tabs[i].classList.remove('active');
    }

    // Mostrar el contenido de la pesta√±a seleccionada
    document.getElementById(tabName).classList.add('active');

    // Agregar la clase active al bot√≥n presionado
    event.target.classList.add('active');
}

// Funci√≥n para manejar la subida de vouchers
function handleVoucherUpload() {
    const fileInput = document.getElementById('voucherUpload');
    if (!fileInput) return;
    
    fileInput.addEventListener('change', function(event) {
        const files = event.target.files;
        const voucherGrid = document.getElementById('voucherGrid');
        
        if (!voucherGrid) return;
        
        for (let i = 0; i < files.length; i++) {
            const file = files[i];
            const reader = new FileReader();
            
            reader.onload = function(e) {
                const voucherItem = document.createElement('div');
                voucherItem.className = 'voucher-item';
                voucherItem.innerHTML = `
                    <div class="voucher-image">
                        <img src="${e.target.result}" alt="Voucher" style="width: 100%; height: 200px; object-fit: cover; border-radius: 8px;">
                    </div>
                    <div class="voucher-info">
                        <h4>${file.name}</h4>
                        <p><strong>Tama√±o:</strong> ${(file.size / 1024).toFixed(2)} KB</p>
                        <p><strong>Tipo:</strong> ${file.type}</p>
                    </div>
                `;
                voucherGrid.appendChild(voucherItem);
            };
            
            reader.readAsDataURL(file);
        }
    });
}

// ========================================
// FUNCIONES PARA EL BOT√ìN SCROLL TO TOP
// ========================================

/**
 * Controla la visibilidad del bot√≥n scroll to top
 */
function toggleScrollButton() {
    const scrollBtn = document.getElementById('scrollToTopBtn');
    const scrollThreshold = 300; // Pixeles desde arriba para mostrar el bot√≥n
    
    if (!scrollBtn) return;
    
    if (window.pageYOffset > scrollThreshold) {
        scrollBtn.classList.add('show');
    } else {
        scrollBtn.classList.remove('show');
    }
}

/**
 * Hace scroll suave hacia arriba
 */
function scrollToTop() {
    window.scrollTo({
        top: 0,
        behavior: 'smooth'
    });
}

/**
 * Inicializa el bot√≥n de scroll to top
 */
function initScrollToTop() {
    // Agregar evento de scroll para mostrar/ocultar el bot√≥n
    window.addEventListener('scroll', toggleScrollButton);
    
    // Tambi√©n verificar al cargar por si la p√°gina ya tiene scroll
    toggleScrollButton();
}

// Inicializar cuando se carga la p√°gina
document.addEventListener('DOMContentLoaded', function() {
    try {
        console.log('üöÄ Sistema COMPLETAMENTE din√°mico iniciado');
        console.log(`üìã Configuradas ${ACTIVIDADES.length} actividades:`, ACTIVIDADES.map(a => a.nombre));
        console.log(`üë• ${ESTUDIANTES_BASE.length} estudiantes base`);
        console.log(`‚ö†Ô∏è ${Object.keys(EXCEPCIONES_PAGO).length} excepciones de pago`);
        
        // PASO 1: Inicializar estudiantes globalmente
        students = generarEstudiantes();
        console.log('‚úÖ Estudiantes generados:', students.length);
        
        // PASO 2: Actualizar INMEDIATAMENTE el resumen (pesta√±a activa)
        setTimeout(() => {
            actualizarResumenSuperior();
        }, 100);
        
        // PASO 3: Preparar tabla de estudiantes
        setTimeout(() => {
            fillStudentTable();
        }, 200);
        
        // PASO 4: Inicializar otras funciones
        setTimeout(() => {
            handleVoucherUpload();
            initScrollToTop();
        }, 300);
        
        console.log('‚úÖ Sistema completamente cargado - TODO es din√°mico ahora');
        console.log('üí° Para agregar actividades: modifica ACTIVIDADES al inicio del archivo');
        console.log('üéØ Resumen, headers y tabla se actualizan autom√°ticamente');
        
    } catch (error) {
        console.error('‚ùå Error cr√≠tico en inicializaci√≥n:', error);
        
        // Fallback: cargar datos b√°sicos si hay error
        console.log('üîß Intentando cargar modo fallback...');
        students = [
            {no: 1, name: "Error - Revisar JavaScript", 
             canastaMadre: 0, regaloMiss: 0, canastaPadre: 0, aro: 0, actPadre: 0, diaMaestro: 0, aniversario: 0}
        ];
    }
});
